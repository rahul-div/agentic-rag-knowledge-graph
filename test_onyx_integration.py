#!/usr/bin/env python3
"""
Safe Onyx Cloud Integration Test Script

This script safely tests Onyx Cloud ingestion without affecting production data.
All test documents are clearly marked and safe to delete.

Usage:
    python test_onyx_integration.py
    
Environment Requirements:
    - ONYX_API_KEY: Your Onyx Cloud API key
    - ONYX_BASE_URL: Your Onyx Cloud base URL (e.g., https://your-org.onyx.app)
"""

import asyncio
import logging
import os
import time
from datetime import datetime
from pathlib import Path

# Add the project root to Python path
import sys
sys.path.insert(0, str(Path(__file__).parent))

from ingestion.onyx_ingest import test_onyx_ingestion

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('test_onyx_integration.log')
    ]
)

logger = logging.getLogger(__name__)


def check_environment():
    """Check that required environment variables are set."""
    required_vars = ['ONYX_API_KEY', 'ONYX_BASE_URL']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"‚ùå Missing required environment variables: {missing_vars}")
        logger.error("Please set these in your .env file or environment")
        return False
    
    logger.info("‚úÖ Environment variables are properly configured")
    return True


async def run_safe_integration_test():
    """
    Run a safe integration test that clearly marks test documents.
    """
    logger.info("=" * 60)
    logger.info("üß™ STARTING SAFE ONYX CLOUD INTEGRATION TEST")
    logger.info("=" * 60)
    
    # Check environment first
    if not check_environment():
        return False
    
    # Create safe test content with clear identification
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    test_content = f"""# [TEST-SAFE-TO-DELETE] Onyx Integration Test {timestamp}

‚ö†Ô∏è **THIS IS A TEST DOCUMENT - SAFE TO DELETE** ‚ö†Ô∏è

Created: {datetime.now().isoformat()}
Test ID: integration_test_{timestamp}
Purpose: Verify Onyx Cloud API connectivity and document ingestion

## Test Description
This document was automatically generated by the hybrid RAG system to test:
- Onyx Cloud API authentication
- Document ingestion and processing
- Sectioning and chunking functionality
- Metadata handling

## Test Data Sections

### Section 1: Basic Text Processing
This section contains simple text to verify basic ingestion functionality.
It includes common words and phrases that should be processed correctly.

### Section 2: Formatted Content
This section tests formatted content processing:
- **Bold text** formatting
- *Italic text* formatting  
- `Code snippets` and technical terms
- [Links](https://example.com) and references

### Section 3: List Processing
Testing list handling:
1. Numbered list item one
2. Numbered list item two  
3. Numbered list item three

Bullet points:
- Bullet point A
- Bullet point B
- Bullet point C

### Section 4: Technical Content
This section includes technical terms that might appear in a RAG system:
- Vector embeddings and similarity search
- Knowledge graph construction
- Document chunking strategies
- Retrieval-augmented generation

## Test Conclusion
This test document verifies that the Onyx Cloud integration is working correctly.
After successful testing, this document can be safely deleted from Onyx Cloud.

---
üóëÔ∏è **SAFE TO DELETE**: This document contains no production data
üîç **Test Pattern**: All test documents have IDs starting with "TEST_SAFE_TO_DELETE_"
"""
    
    try:
        logger.info("üöÄ Starting Onyx Cloud ingestion test...")
        
        # Run the test with clearly marked test document
        success = await test_onyx_ingestion(
            test_content=test_content,
            test_filename=f"TEST_SAFE_TO_DELETE_integration_{timestamp}.md"
        )
        
        if success:
            logger.info("=" * 60)
            logger.info("‚úÖ ONYX CLOUD INTEGRATION TEST PASSED!")
            logger.info("=" * 60)
            logger.info("üìã What was tested:")
            logger.info("   ‚Ä¢ API authentication and connectivity")
            logger.info("   ‚Ä¢ Document formatting and ingestion")
            logger.info("   ‚Ä¢ Error handling and retry logic")
            logger.info("   ‚Ä¢ Metadata processing")
            logger.info("")
            logger.info("üîç In your Onyx Cloud UI, you should see:")
            logger.info(f"   ‚Ä¢ Document title: '[TEST-SAFE-TO-DELETE] Onyx Integration Test {timestamp}'")
            logger.info(f"   ‚Ä¢ Document ID starting with: 'TEST_SAFE_TO_DELETE_'")
            logger.info("   ‚Ä¢ Metadata tags including: 'test_document', 'safe_to_delete'")
            logger.info("")
            logger.info("üóëÔ∏è  Clean up: You can safely delete the test document from Onyx UI")
            return True
        else:
            logger.error("=" * 60)
            logger.error("‚ùå ONYX CLOUD INTEGRATION TEST FAILED!")
            logger.error("=" * 60)
            logger.error("üîç Check the logs above for specific error details")
            logger.error("üîß Common issues:")
            logger.error("   ‚Ä¢ Invalid API key or base URL")
            logger.error("   ‚Ä¢ Network connectivity problems")
            logger.error("   ‚Ä¢ Onyx Cloud service unavailable")
            logger.error("   ‚Ä¢ Incorrect environment configuration")
            return False
            
    except Exception as e:
        logger.error("=" * 60)
        logger.error("üí• UNEXPECTED ERROR IN TEST!")
        logger.error("=" * 60)
        logger.error(f"Error: {e}")
        logger.exception("Full error details:")
        return False


def main():
    """Main function to run the integration test."""
    try:
        # Run the async test
        result = asyncio.run(run_safe_integration_test())
        
        if result:
            print("\nüéâ Integration test completed successfully!")
            print("Check your Onyx Cloud UI to see the test document.")
            exit(0)
        else:
            print("\n‚ùå Integration test failed!")
            print("Check the logs for details.")
            exit(1)
            
    except KeyboardInterrupt:
        logger.info("üõë Test interrupted by user")
        exit(1)
    except Exception as e:
        logger.error(f"üí• Unexpected error: {e}")
        exit(1)


if __name__ == "__main__":
    main()
